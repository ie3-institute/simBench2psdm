// generated by tscfg 0.9.9 on Wed Mar 04 08:21:15 CET 2020
// source: src/main/resources/config-template.conf

package edu.ie3.simbench.config

case class SimbenchConfig(
    io: SimbenchConfig.Io
)
object SimbenchConfig {
  case class Io(
      baseUrl: java.lang.String,
      csv: SimbenchConfig.Io.Csv,
      downloadFolder: java.lang.String,
      simbenchCodes: scala.List[java.lang.String]
  )
  object Io {
    case class Csv(
        fileEncoding: java.lang.String,
        fileEnding: java.lang.String,
        separator: java.lang.String
    )
    object Csv {
      def apply(c: com.typesafe.config.Config): SimbenchConfig.Io.Csv = {
        SimbenchConfig.Io.Csv(
          fileEncoding =
            if (c.hasPathOrNull("fileEncoding")) c.getString("fileEncoding")
            else "UTF-8",
          fileEnding =
            if (c.hasPathOrNull("fileEnding")) c.getString("fileEnding")
            else ".csv",
          separator =
            if (c.hasPathOrNull("separator")) c.getString("separator") else ";"
        )
      }
    }

    def apply(c: com.typesafe.config.Config): SimbenchConfig.Io = {
      SimbenchConfig.Io(
        baseUrl =
          if (c.hasPathOrNull("baseUrl")) c.getString("baseUrl")
          else "http://141.51.193.167/simbench/gui/usecase/download",
        csv = SimbenchConfig.Io.Csv(
          if (c.hasPathOrNull("csv")) c.getConfig("csv")
          else com.typesafe.config.ConfigFactory.parseString("csv{}")
        ),
        downloadFolder =
          if (c.hasPathOrNull("downloadFolder")) c.getString("downloadFolder")
          else "inputData/download/",
        simbenchCodes = $_L$_str(c.getList("simbenchCodes"))
      )
    }
  }

  def apply(c: com.typesafe.config.Config): SimbenchConfig = {
    SimbenchConfig(
      io = SimbenchConfig.Io(
        if (c.hasPathOrNull("io")) c.getConfig("io")
        else com.typesafe.config.ConfigFactory.parseString("io{}")
      )
    )
  }

  private def $_L$_str(
      cl: com.typesafe.config.ConfigList
  ): scala.List[java.lang.String] = {
    import scala.collection.JavaConverters._
    cl.asScala.map(cv => $_str(cv)).toList
  }
  private def $_expE(
      cv: com.typesafe.config.ConfigValue,
      exp: java.lang.String
  ) = {
    val u: Any = cv.unwrapped
    new java.lang.RuntimeException(
      cv.origin.lineNumber +
        ": expecting: " + exp + " got: " +
        (if (u.isInstanceOf[java.lang.String]) "\"" + u + "\"" else u)
    )
  }
  private def $_str(cv: com.typesafe.config.ConfigValue) =
    java.lang.String.valueOf(cv.unwrapped())
}
