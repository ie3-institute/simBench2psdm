@startuml

participant Main
participant Coordinator
participant Converter
participant GridConverter
participant ResConverter
collections ResConverterWorker
participant Mutator

Main -> Coordinator: Start(Config)
== Init ==
Coordinator --[#blue]> Converter: <font color=blue>spawn & watch</font>
Coordinator -> Converter: Init(String)
Coordinator <- Converter: ConverterInitialized
Coordinator -> Converter: Convert(String)

== Converting grid structure ==
Converter --[#blue]> Mutator: <font color=blue>spawn & watch</font>
Converter -> Mutator: Init(Config)
Converter <- Mutator: Ready
Converter --[#blue]> GridConverter: <font color=blue>spawn & watch</font>
Converter -> GridConverter: ConvertGridStructure(...)
Converter <- GridConverter: GridStructureConverted(Map[Node,NodeInput])
note left: Now all other entities\ncan be converted (not)\nconsidering islanded\nnodes

== Converting participants ==
Converter --[#blue]> ResConverter: <font color=blue>spawn & watch</font>
Converter -> ResConverter: Init(...)
ResConverter --[#blue]> ResConverterWorker:  <font color=blue>spawn & watch</font>
Converter <- ResConverter: ResConverterReady
Converter -> ResConverter: Convert(...)
ResConverter -> ResConverterWorker: Convert(...)
ResConverterWorker -> Mutator: Persist(...)
activate Mutator
ResConverterWorker <- Mutator: TimeSeriesPersisted(...)
ResConverter <- ResConverterWorker: Converted(...)
ResConverter --[#blue]> ResConverterWorker: <font color=blue>terminate</font>
ResConverter <--[#blue] ResConverterWorker
Converter <- ResConverter: ResConverted(...)

== Mutate Grid structure ==
GridConverter -> Mutator: Mutate(...)
GridConverter <- Mutator: Mutated(...)
Converter <- GridConverter: Done

== Shutdown ==
Converter -> Mutator: Shutdown
Converter <- Mutator: Done
deactivate Mutator

Coordinator <- Converter: Converted(String)
@enduml